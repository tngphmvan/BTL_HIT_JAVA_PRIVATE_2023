package GUI;

import abstractClass.StaffAbstract;
import service.StaffService;
import java.awt.Color;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Staff;

public class StaffGUI extends javax.swing.JFrame {

    /**
     * Creates new form StaffGUI
     */
    List<Staff> list;
    int row;
    DefaultTableModel model;
    StaffAbstract std = new StaffService();
    private Staff st;

    public StaffGUI() {
        initComponents();
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Table.setModel(model);
        model.addColumn("Staff_ID");
        model.addColumn("Name");
        model.addColumn("Role");
        model.addColumn("Salry");
        model.addColumn("Workplace");
        list = std.getStaffs();
        try {
            std.getConnection().close();
        } catch (SQLException ex) {
            Logger.getLogger(AddPigGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Staff u : list) {
            model.addRow(new Object[]{u.getStaff_id(), u.getName(), u.getRole(), u.getSalary(), u.getWorkplace_id()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        removeButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        changeButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        RoleCombobox = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        binButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        salaryField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        workplaceField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        valueField = new javax.swing.JTextField();
        filterCombobox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        filterCombobox1 = new javax.swing.JComboBox<>();
        increaseRadioButton = new javax.swing.JRadioButton();
        decreaseRadioButton = new javax.swing.JRadioButton();
        sortButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        minField = new javax.swing.JTextField();
        maxField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(15, 0));

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        changeButton.setText("Change");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Staff_id");

        jLabel2.setText("Salary");

        jLabel3.setText("Role");

        idField.setText("Hola");
        idField.setEnabled(false);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        nameField.setText("Messi");
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        RoleCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Worker", "Accountant", "Veterinarian", "SalesAgent" }));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        binButton.setText("Recycle bin");
        binButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binButtonActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        salaryField.setText("Goodbye");
        salaryField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salaryFieldMouseClicked(evt);
            }
        });
        salaryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        workplaceField.setText("Ronaldo");
        workplaceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workplaceFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Workplace");

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("FIltered by");

        jLabel7.setText("Value");

        filterCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Staff_id", "Name", "Role", "workplace", "Salary" }));
        filterCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboboxActionPerformed(evt);
            }
        });

        jLabel8.setText("Sorted by");

        filterCombobox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Staff_id", "Name", "Role", "workplace", "Salary" }));
        filterCombobox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCombobox1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(increaseRadioButton);
        increaseRadioButton.setText("Increase");

        buttonGroup1.add(decreaseRadioButton);
        decreaseRadioButton.setText("Decrease");

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Min Salary");

        jLabel10.setText("Max Salary");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(binButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(327, 327, 327)
                                .addComponent(addButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 400, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exitButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(176, 176, 176))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(1, 1, 1)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(98, 98, 98)
                                        .addComponent(filterButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filterCombobox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(filterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(decreaseRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(increaseRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addGap(18, 18, 18)
                                                .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(18, 18, 18)
                                                .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(RoleCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(workplaceField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(changeButton)))))
                                .addGap(27, 27, 27))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(sortButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exitButton)
                        .addComponent(binButton))
                    .addComponent(jLabel4)
                    .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RoleCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(workplaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeButton)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(filterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(filterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterCombobox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(increaseRadioButton))
                        .addGap(18, 18, 18)
                        .addComponent(decreaseRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(sortButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(refreshButton)
                    .addComponent(addButton))
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        row = Table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(StaffGUI.this, "Please choose Staff", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int confirm = JOptionPane.showConfirmDialog(StaffGUI.this, "Are you sure ??");
            if (confirm == JOptionPane.YES_OPTION) {
                st = list.get(Table.getSelectedRow());
                std.hideStaff(st);
                try {
                    std.getConnection().close();
                } catch (SQLException ex) {
                    Logger.getLogger(StaffGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                model.setRowCount(0);
                for (Staff u : list) {
                    model.addRow(new Object[]{u.getStaff_id(), u.getName(), u.getRole(), u.getSalary(), u.getWorkplace_id()});
                }
                refreshButtonActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // TODO add your handling code here:
        if (Table.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please chose a Staff");
            return;
        } else {
            int confirm = JOptionPane.showConfirmDialog(rootPane, "Are you sure ??");
            if (confirm == JOptionPane.YES_OPTION) {
                if (salaryField.getText().matches("[0-9.]+") == false) {
                    salaryField.setBackground(Color.red);
                    JOptionPane.showMessageDialog(null, "Please enter number into Salary field");
                    return;
                } else if (nameField.getText().trim().equals("")) {
                    JOptionPane.showConfirmDialog(rootPane, "There is no blank field allowed");
                    return;
                } else if (salaryField.getText().trim().equals("")) {
                    JOptionPane.showConfirmDialog(rootPane, "There is no blank field allowed");
                    return;
                } else if (workplaceField.getText().trim().equals("")) {
                    JOptionPane.showConfirmDialog(rootPane, "There is no blank field allowed");
                    return;
                } else {
                    st = list.get(Table.getSelectedRow());
                    st.setStaff_id(idField.getText().trim());
                    st.setName(nameField.getText().trim());
                    st.setRole(String.valueOf(RoleCombobox.getSelectedItem()).trim());
                    st.setSalary(Double.valueOf(salaryField.getText()));
                    st.setWorkplace_id(workplaceField.getText());
                    std.updateStaff(st);
                    JOptionPane.showMessageDialog(rootPane, "Change Success !!");
                    try {
                        std.getConnection().close();
                    } catch (SQLException ex) {
                        Logger.getLogger(StaffGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    refreshButtonActionPerformed(evt);
                }
            }
        }

    }//GEN-LAST:event_changeButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        list = std.getStaffs();
        try {
            std.getConnection().close();
        } catch (SQLException ex) {
            Logger.getLogger(AddPigGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        model.setRowCount(0);

        for (Staff u : list) {
            model.addRow(new Object[]{u.getStaff_id(), u.getName(), u.getRole(), u.getSalary(), u.getWorkplace_id()});
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new AddStaffGUI().setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void binButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new StaffBinGUI().setVisible(true);
    }//GEN-LAST:event_binButtonActionPerformed

    private void salaryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryFieldActionPerformed
        // TODO add your handling code here:
        salaryField.setBackground(Color.white);
    }//GEN-LAST:event_salaryFieldActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if (Table.getSelectedRow() == -1) {
            return;
        }
        st = list.get(Table.getSelectedRow());
        idField.setText(st.getStaff_id());
        nameField.setText(st.getName());
        RoleCombobox.setSelectedItem(st.getRole());
        salaryField.setText(String.valueOf(st.getSalary()));
        workplaceField.setText(st.getWorkplace_id());
    }//GEN-LAST:event_TableMouseClicked

    private void workplaceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workplaceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_workplaceFieldActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:
        switch (String.valueOf(filterCombobox.getSelectedItem())) {
            case "Staff_id": {
                list = list.stream().filter(o -> o.getStaff_id().toLowerCase().contains(valueField.getText().toLowerCase())).collect(Collectors.toList());
                break;
            }
            case "Name": {
                list = list.stream().filter(o -> o.getName().toLowerCase().contains(valueField.getText().toLowerCase())).collect(Collectors.toList());
                break;
            }
            case "Role": {
                list = list.stream().filter(o -> o.getRole().toLowerCase().contains(valueField.getText().toLowerCase())).collect(Collectors.toList());
                break;
            }
            case "workplace": {
                list = list.stream().filter(o -> o.getWorkplace_id().toLowerCase().contains(valueField.getText().toLowerCase())).collect(Collectors.toList());
                break;
            }
            case "Salary": {
                if (minField.getText().matches("[0-9.]+") == false || maxField.getText().matches("[0-9.]+") == false) {
                    if (minField.getText().matches("[0-9.]+") == false) {
                        minField.setBackground(Color.red);
                        JOptionPane.showMessageDialog(null, "Please enter number into Min Salary field");
                    } else if (maxField.getText().matches("[0-9.]+") == false) {
                        maxField.setBackground(Color.red);
                        JOptionPane.showMessageDialog(null, "Please enter number into Max Salary field");
                    }
                } else {
                    if (Double.valueOf(minField.getText()) >= Double.valueOf(maxField.getText())) {
                        JOptionPane.showMessageDialog(null, "Min Salary field has to be smaller than Max salary field !!");
                        return;
                    }
                    minField.setBackground(Color.white);
                    maxField.setBackground(Color.white);
                    list = list.stream().filter(o -> o.getSalary() >= Double.valueOf(minField.getText()) && o.getSalary() <= Double.valueOf(maxField.getText())).collect(Collectors.toList());
                }
                break;
            }
        }
        model.setRowCount(0);
        for (Staff u : list) {
            model.addRow(new Object[]{u.getStaff_id(), u.getName(), u.getRole(), u.getSalary(), u.getWorkplace_id()});
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    private void filterComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterComboboxActionPerformed

    private void filterCombobox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterCombobox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterCombobox1ActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new AdminGUI().setVisible(true);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // TODO add your handling code here:
        switch (String.valueOf(filterCombobox.getSelectedItem())) {
            case "Staff_id": {
                if (increaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o1.getStaff_id().compareTo(o2.getStaff_id());
                    }
                    ).collect(Collectors.toList());
                }
                if (decreaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o2.getStaff_id().compareTo(o1.getStaff_id());
                    }
                    ).collect(Collectors.toList());
                }
                break;
            }
            case "Name": {
                if (increaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o1.getName().compareTo(o2.getName());
                    }
                    ).collect(Collectors.toList());
                }
                if (decreaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o2.getName().compareTo(o1.getName());
                    }
                    ).collect(Collectors.toList());
                }
                break;
            }
            case "Role": {
                if (increaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o1.getRole().compareTo(o2.getRole());
                    }
                    ).collect(Collectors.toList());
                }
                if (decreaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o2.getRole().compareTo(o1.getRole());
                    }
                    ).collect(Collectors.toList());
                }
                break;
            }
            case "workplace": {
                if (increaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o1.getWorkplace_id().compareTo(o2.getWorkplace_id());
                    }
                    ).collect(Collectors.toList());
                }
                if (decreaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return o2.getWorkplace_id().compareTo(o1.getWorkplace_id());
                    }
                    ).collect(Collectors.toList());
                }
                break;
            }
            case "Salary": {
                if (decreaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return Double.compare(o1.getSalary(), o2.getSalary());
                    }
                    ).collect(Collectors.toList());
                }
                if (increaseRadioButton.isSelected()) {
                    list = list.stream().sorted((o1, o2)
                            -> {
                        return Double.compare(o2.getSalary(), o1.getSalary());
                    }
                    ).collect(Collectors.toList());
                }
                break;
            }
        }
        model.setRowCount(0);
        for (Staff u : list) {
            model.addRow(new Object[]{u.getStaff_id(), u.getName(), u.getRole(), u.getSalary(), u.getWorkplace_id()});
        }
    }//GEN-LAST:event_sortButtonActionPerformed

    private void salaryFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salaryFieldMouseClicked
        // TODO add your handling code here:
        salaryField.setBackground(Color.white);
    }//GEN-LAST:event_salaryFieldMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> RoleCombobox;
    private javax.swing.JTable Table;
    private javax.swing.JButton addButton;
    private javax.swing.JButton binButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton changeButton;
    private javax.swing.JRadioButton decreaseRadioButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JComboBox<String> filterCombobox;
    private javax.swing.JComboBox<String> filterCombobox1;
    private javax.swing.JTextField idField;
    private javax.swing.JRadioButton increaseRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxField;
    private javax.swing.JTextField minField;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField salaryField;
    private javax.swing.JButton sortButton;
    private javax.swing.JTextField valueField;
    private javax.swing.JTextField workplaceField;
    // End of variables declaration//GEN-END:variables
}
